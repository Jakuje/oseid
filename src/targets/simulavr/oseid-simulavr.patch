diff --git a/src/Makefile.am b/src/Makefile.am
index f9e3efb..0ad2a34 100644
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -70,6 +70,7 @@ simulavr_SOURCES     = \
 	sig.h              \
 	spi.c              \
 	spi.h              \
+	spm_helper.c       \
 	sram.c             \
 	sram.h             \
 	stack.c            \
@@ -85,6 +86,8 @@ simulavr_SOURCES     = \
 	utils.c            \
 	utils.h            \
 	vdevs.h            \
+	OsEID.h		   \
+	OsEID.c		   \
 	defn/90s1200.h     \
 	defn/90s2313.h     \
 	defn/90s4414.h     \
@@ -93,6 +96,7 @@ simulavr_SOURCES     = \
 	defn/mega16.h      \
 	defn/mega103.h     \
 	defn/mega128.h     \
+	defn/OsEID128.h    \
 	defn/43usb320.h    \
 	defn/43usb325.h    \
 	defn/43usb326.h    \
diff --git a/src/OsEID.c b/src/OsEID.c
new file mode 100644
index 0000000..69018d3
--- /dev/null
+++ b/src/OsEID.c
@@ -0,0 +1,380 @@
+/*
+ * $Id: stack.c,v 1.15 2004/01/30 07:09:56 troth Exp $
+ *
+ ****************************************************************************
+ *
+ * simulavr - A simulator for the Atmel AVR family of microcontrollers.
+ * Copyright (C) 2001, 2002, 2003, 2004  Theodore A. Roth
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ ****************************************************************************
+ */
+
+/** \file ee.c
+    \brief Module for the definition of the stack. 
+
+    Defines the classes stack, hw_stack, and mem_stack.
+
+    FIXME: Ted, I would really really really love to put in a description of
+    what is the difference between these three classes and how they're used,
+    but I don't understand it myself. */
+
+#include <config.h>
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+
+#include "avrerror.h"
+#include "avrmalloc.h"
+#include "avrclass.h"
+#include "utils.h"
+#include "callback.h"
+#include "op_names.h"
+
+#include "storage.h"
+#include "flash.h"
+
+#include "vdevs.h"
+#include "memory.h"
+#include "stack.h"
+#include "register.h"
+#include "sram.h"
+#include "eeprom.h"
+#include "timers.h"
+#include "ports.h"
+
+#include "avrcore.h"
+
+#include "display.h"
+
+// OsEID
+typedef struct _Oseid Oseid;
+
+struct _Oseid
+{
+  VDevice parent;
+  uint16_t addr;
+// display data:
+// write 0 to FIFOCTRL (reset FIFO)
+// push data to FIFO
+// write 1 to FIFOCTRL => FIFO  to stdout
+
+// read stdin:
+// write 0 to FIFOCTRL (reset FIFO)
+// write 2 to FIFOCTRL (this block  until user type input line)
+// pop FIFO - in rx,FIFO wait until enough data is readed
+
+  uint8_t FIFO;
+  uint8_t FIFOCTRL;
+
+  uint8_t fifo[256];
+  uint8_t flen;
+};
+
+static Oseid *oseid_new (int addr, char *name);
+static void oseid_construct (Oseid * oseid, int addr, char *name);
+static void oseid_destroy (void *sp);
+static uint8_t oseid_read (VDevice * dev, int addr);
+static void oseid_write (VDevice * dev, int addr, uint8_t val);
+static void oseid_reset (VDevice * dev);
+static void oseid_add_addr (VDevice * vdev, int addr, char *name,
+			    int rel_addr, void *data);
+
+VDevice *
+oseid_create (int addr, char *name, int rel_addr, void *data)
+{
+  return (VDevice *) oseid_new (addr, name);
+}
+
+static Oseid *
+oseid_new (int addr, char *name)
+{
+  Oseid *oseid;
+  oseid = avr_new (Oseid, 1);
+  oseid_construct (oseid, addr, name);
+  class_overload_destroy ((AvrClass *) oseid, oseid_destroy);
+  return oseid;
+}
+
+static void
+oseid_construct (Oseid * oseid, int addr, char *name)
+{
+  if (oseid == NULL)
+    avr_error ("passed null ptr");
+
+  vdev_construct ((VDevice *) oseid, oseid_read, oseid_write, oseid_reset,
+		  oseid_add_addr);
+  oseid_add_addr ((VDevice *) oseid, addr, name, 0, NULL);
+  oseid_reset ((VDevice *) oseid);
+}
+
+static void
+oseid_destroy (void *oseid)
+{
+  if (oseid == NULL)
+    return;
+  vdev_destroy (oseid);
+}
+
+static uint8_t
+oseid_read (VDevice * dev, int addr)
+{
+  Oseid *oseid = (Oseid *) dev;
+  uint8_t len = oseid->flen;
+
+  if (addr == (oseid->addr) + 1)
+    {
+      avr_message ("input len %d\n", oseid->flen);
+      oseid->flen = 0;
+      return len;
+    }
+  if (addr == (oseid->addr) + 0)
+    return oseid->fifo[oseid->flen++];
+
+  avr_error ("Bad address: 0x%04x", addr);
+  return 0;
+}
+
+static void
+oseid_write (VDevice * dev, int addr, uint8_t val)
+{
+  Oseid *oseid = (Oseid *) dev;
+  int i;
+
+  if (addr == (oseid->addr) + 1)
+    {
+      if (val == 0)
+	oseid->flen = 0;
+      if (val == 1)
+	{
+	  printf ("< ");
+	  for (i = 0; i < oseid->flen; i++)
+	    printf ("%02x ", oseid->fifo[i]);
+	  printf ("\n");
+	  oseid->flen = 0;
+	}
+      if (val == 2)
+	{
+	  char buffer[1024];
+	  int val;
+	  char *pos;
+	  printf ("> ");
+
+	  oseid->flen = 0;
+	  fflush (stdin);
+	  while (buffer != fgets (buffer, 1024, stdin));
+	  pos = buffer;
+
+	  while (1 == sscanf (pos, "%2x ", &val))
+	    {
+	      if (pos > buffer + 1024)
+		break;
+	      pos += 3;
+	      oseid->fifo[oseid->flen] = val;
+	      oseid->flen++;
+	    }
+	}
+      if (val == 3)
+	{
+	  FILE *f;
+	  f = fopen ("/dev/urandom", "r");
+	  oseid->fifo[0] = fgetc (f);
+	  avr_message ("RND data %02x\n", oseid->fifo[0]);
+	  fclose (f);
+	  oseid->flen = 0;
+	}
+
+    }
+  else if (addr == (oseid->addr) + 0)
+    oseid->fifo[oseid->flen++] = val;
+  else
+    avr_error ("Bad address: 0x%04x (want %x)", addr, oseid->addr);
+}
+
+static void
+oseid_reset (VDevice * dev)
+{
+  Oseid *oseid = (Oseid *) dev;
+  memset (oseid->fifo, 0, 256);
+  avr_message ("OsEID fifo reset\n");
+}
+
+static void
+oseid_add_addr (VDevice * vdev, int addr, char *name, int rel_addr,
+		void *data)
+{
+  Oseid *oseid = (Oseid *) vdev;
+
+  if (strncmp ("FIFOCTRL", name, 8) == 0)
+    ;
+  else if (strncmp ("FIFO", name, 4) == 0)
+    oseid->addr = addr;
+
+  else
+    avr_error ("Bad address: 0x%04x %s", addr, name);
+  avr_message ("setting addres %x\n", oseid->addr);
+}
+
+
+/****************************************************************************\
+ *
+ * EEprom (VDevice) Definition.
+ *
+\****************************************************************************/
+
+#ifndef DOXYGEN			/* don't expose to doxygen */
+typedef struct _EEprom EEprom;
+
+struct _EEprom
+{
+  VDevice parent;
+
+  uint16_t addr;
+
+  uint8_t EECR, EEDR, EEARL, EEARH;
+  uint8_t mem[1024];		// atmega128 only...
+};
+#endif
+static EEprom *ee_new (int addr, char *name);
+static void ee_construct (EEprom * ee, int addr, char *name);
+static void ee_destroy (void *sp);
+static uint8_t ee_read (VDevice * dev, int addr);
+static void ee_write (VDevice * dev, int addr, uint8_t val);
+static void ee_reset (VDevice * dev);
+static void ee_add_addr (VDevice * vdev, int addr, char *name, int rel_addr,
+			 void *data);
+
+
+VDevice *
+ee_create (int addr, char *name, int rel_addr, void *data)
+{
+  return (VDevice *) ee_new (addr, name);
+}
+
+static EEprom *
+ee_new (int addr, char *name)
+{
+  EEprom *ee;
+
+  ee = avr_new (EEprom, 1);
+  ee_construct (ee, addr, name);
+  class_overload_destroy ((AvrClass *) ee, ee_destroy);
+  return ee;
+}
+
+static void
+ee_construct (EEprom * ee, int addr, char *name)
+{
+  if (ee == NULL)
+    avr_error ("passed null ptr");
+
+  vdev_construct ((VDevice *) ee, ee_read, ee_write, ee_reset, ee_add_addr);
+  ee_add_addr ((VDevice *) ee, addr, name, 0, NULL);
+  ee_reset ((VDevice *) ee);
+}
+
+static void
+ee_destroy (void *ee)
+{
+  if (ee == NULL)
+    return;
+  vdev_destroy (ee);
+}
+
+static uint8_t
+ee_read (VDevice * dev, int addr)
+{
+  EEprom *ee = (EEprom *) dev;
+
+  if (addr == (ee->addr) + 1)
+    return ee->EEDR;
+
+  if (addr == (ee->addr) + 2)
+    return ee->EEARL;
+
+  if (addr == (ee->addr) + 3)
+    return ee->EEARH & 3;
+
+  if (addr == (ee->addr) + 0)
+    {
+      return 0;
+    }
+
+  avr_error ("Bad address: 0x%04x", addr);
+
+  return 0;
+}
+
+static void
+ee_write (VDevice * dev, int addr, uint8_t val)
+{
+  EEprom *ee = (EEprom *) dev;
+
+  if (addr == (ee->addr) + 2)
+    ee->EEARL = val;
+  else if (addr == (ee->addr) + 3)
+    ee->EEARH = val;
+  else if (addr == (ee->addr) + 1)
+    ee->EEDR = val;
+  else if (addr == (ee->addr) + 0)
+    {
+      if (val == 1)
+	{
+	  ee->EEDR = ee->mem[((ee->EEARH << 8 | ee->EEARL) & 0x3ff)];
+/*
+	  avr_message ("triggered read from  0x%04x (%02x)\n",
+		       (ee->EEARH << 8 | ee->EEARL) & 0x3ff, ee->EEDR);
+*/	  
+	  return;
+	}
+      if (val & 2)
+	{
+
+	  avr_message ("triggered write to  0x%04x (%02x)\n",
+		       (ee->EEARH << 8 | ee->EEARL) & 0x3ff, ee->EEDR);
+	  ee->mem[((ee->EEARH << 8 | ee->EEARL) & 0x3ff)] = ee->EEDR;
+	}
+    }
+  else
+    avr_error ("Bad address: 0x%04x", addr);
+}
+
+static void
+ee_reset (VDevice * dev)
+{
+  EEprom *ee = (EEprom *) dev;
+  memset (ee->mem, 0xff, 1024);
+  avr_message ("EEprom reset\n");
+}
+
+static void
+ee_add_addr (VDevice * vdev, int addr, char *name, int rel_addr, void *data)
+{
+  EEprom *ee = (EEprom *) vdev;
+
+  if (strncmp ("EECR", name, 4) == 0)
+    ee->addr = addr;
+
+  else if (strncmp ("EEDR", name, 4) == 0)
+    ;
+  else if (strncmp ("EEARL", name, 5) == 0)
+    ;
+  else if (strncmp ("EEARH", name, 5) == 0)
+    ;
+  else
+    avr_error ("Bad address: 0x%04x %s", addr, name);
+}
diff --git a/src/OsEID.h b/src/OsEID.h
new file mode 100644
index 0000000..3c2f9fb
--- /dev/null
+++ b/src/OsEID.h
@@ -0,0 +1,7 @@
+#ifndef _OsEID
+#define _OsEID
+
+extern VDevice *ee_create (int addr, char *name, int rel_addr, void *data);
+extern VDevice *oseid_create (int addr, char *name, int rel_addr, void *data);
+
+#endif
diff --git a/src/avrcore.c b/src/avrcore.c
index 089b770..b991a99 100644
--- a/src/avrcore.c
+++ b/src/avrcore.c
@@ -59,6 +59,7 @@
 #include "decoder.h"
 #include "sig.h"
 #include "devsupp.h"
+#include "spm_helper.h"
 
 /** \brief Flag for enabling output of instruction debug messages. */
 int global_debug_inst_output = 0;
@@ -444,6 +445,9 @@ avr_core_construct (AvrCore *core, DevSuppDefn *dev)
         core->stack = (Stack *)memstack_new (core->mem, 0x5d);
     }
 
+    /* SPM instruction helper */
+    core->spmhelper = (SPMhelper *) spmhelper_new (core->flash);
+
     /* Assuming the SREG is always at 0x5f. */
 
     core->sreg = (SREG *)avr_core_get_vdev_by_addr (core, 0x5f);
@@ -509,6 +513,7 @@ avr_core_destroy (void *core)
     class_unref ((AvrClass *)_core->gpwr);
     class_unref ((AvrClass *)_core->mem);
     class_unref ((AvrClass *)_core->stack);
+    class_unref ((AvrClass *)_core->spmhelper);
 
     dlist_delete_all (_core->breakpoints);
     dlist_delete_all (_core->clk_cb);
diff --git a/src/avrcore.h b/src/avrcore.h
index 25ef71f..4a28cde 100644
--- a/src/avrcore.h
+++ b/src/avrcore.h
@@ -29,7 +29,7 @@
 #include "intvects.h"
 
 #include "display.h"
-
+#include "spm_helper.h"
 /****************************************************************************\
  *
  * AvrCore(AvrClass) Definition
@@ -67,6 +67,8 @@ struct _AvrCore
                                    sram, etc) */
     Stack *stack;               /* a stack implementaton */
 
+    SPMhelper *spmhelper;       /* SPM instruction helper */
+
     DList *breakpoints;         /* head of list of active breakpoints */
 
     DList *irq_pending;         /* head of list of pending interrupts (sorted
@@ -316,6 +318,12 @@ avr_core_stack_push (AvrCore *core, int bytes, uint32_t val)
 {
     stack_push (core->stack, bytes, val);
 }
+/* spm emulation */
+extern inline void
+avr_core_spm(AvrCore *core, int reg0, int reg1, int Z)
+{
+    spm_run (core->spmhelper, reg0, reg1, Z);
+}
 
 /* Private
  
diff --git a/src/config-h.in b/src/config-h.in
index 7f41e6d..1f112e9 100644
--- a/src/config-h.in
+++ b/src/config-h.in
@@ -137,6 +137,9 @@
 /* Define to the one symbol short name of this package. */
 #undef PACKAGE_TARNAME
 
+/* Define to the home page for this package. */
+#undef PACKAGE_URL
+
 /* Define to the version of this package. */
 #undef PACKAGE_VERSION
 
@@ -186,7 +189,7 @@
 /* Define to rpl_realloc if the replacement function should be used. */
 #undef realloc
 
-/* Define to `unsigned' if <sys/types.h> does not define. */
+/* Define to `unsigned int' if <sys/types.h> does not define. */
 #undef size_t
 
 /* Define missing socklen_t. */
diff --git a/src/decoder.c b/src/decoder.c
index 2712f51..d4e80c3 100644
--- a/src/decoder.c
+++ b/src/decoder.c
@@ -1167,7 +1167,7 @@ avr_op_ELPM_Z (AvrCore *core, uint16_t opcode, unsigned int arg1,
     if ((Rd == 30) || (Rd == 31))
         avr_error ("Results of operation are undefined");
 
-    avr_warning ("needs serious code review\n");
+//    avr_warning ("needs serious code review\n");
 
     /* FIXME: Is this correct? */
     /* Z is R31:R30 */
@@ -2941,7 +2941,13 @@ avr_op_SPM (AvrCore *core, uint16_t opcode, unsigned int arg1,
      * Flags      : None
      * Num Clocks : -
      */
-    avr_error ("This opcode is not implemented yet: 0x%04x", opcode);
+    int Z;
+
+    Z = ((avr_core_rampz_get (core) & 0x3f) << 16) +(avr_core_gpwr_get (core, 31) << 8) + avr_core_gpwr_get (core, 30);
+    avr_core_spm (core, avr_core_gpwr_get (core, 0), avr_core_gpwr_get (core, 1), Z);
+    avr_core_PC_incr (core, 1);
+    avr_core_inst_CKS_set (core, 2);
+
     return opcode_SPM;
 }
 
diff --git a/src/defn/OsEID128.h b/src/defn/OsEID128.h
new file mode 100644
index 0000000..fcae933
--- /dev/null
+++ b/src/defn/OsEID128.h
@@ -0,0 +1,380 @@
+/*
+ * $Id: mega128.h,v 1.2 2004/09/15 15:17:40 troth Exp $
+ *
+ ****************************************************************************
+ *
+ * simulavr - A simulator for the Atmel AVR family of microcontrollers.
+ * Copyright (C) 2004  Theodore A. Roth
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ ****************************************************************************
+ */
+
+#if defined (IN_DEVSUPP_C)
+/* *INDENT-OFF* */
+
+static DevSuppDefn defn_OsEID128 = {
+    .name           = "OsEID128",
+    .stack_type     = STACK_MEMORY,
+    .irq_vect_idx   = VTAB_ATMEGA128,
+    .has_ext_io_reg = 1,
+
+    .size = {
+        .pc         = 2,
+        .stack      = 0,
+        .flash      = 128 * 1024,
+        .sram       = 16 * 1024,
+        .eeprom     = 4 * 1024
+    },
+
+    .io_reg = {
+        {
+            .addr = 0x20,
+            .name = "PINF",
+            .vdev_create = port_create,
+            .reset_value = 0x00,
+            .rd_mask = 0xff,
+            .wr_mask = 0xff,
+        },
+        {
+            .addr = 0x21,
+            .name = "PINE",
+            .vdev_create = port_create,
+            .reset_value = 0x00,
+            .rd_mask = 0xff,
+            .wr_mask = 0xff,
+        },
+        {
+            .addr = 0x22,
+            .name = "DDRE",
+            .ref_addr = 0x21,
+            .reset_value = 0x00,
+            .rd_mask = 0xff,
+            .wr_mask = 0xff,
+        },
+        {
+            .addr = 0x23,
+            .name = "PORTE",
+            .ref_addr = 0x21,
+            .reset_value = 0x00,
+            .rd_mask = 0xff,
+            .wr_mask = 0xff,
+        },
+        { .addr = 0x24, .name = "ADCL", },
+        { .addr = 0x25, .name = "ADCH", },
+        { .addr = 0x26, .name = "ADCSRA", },
+        { .addr = 0x27, .name = "ADMUX", },
+        { .addr = 0x28, .name = "ACSR", },
+        { .addr = 0x29, .name = "UBRR0L", },
+        { .addr = 0x2a, .name = "UCSR0B", },
+        { .addr = 0x2b, .name = "UCSR0A", },
+        { .addr = 0x2c, .name = "UDR0", },
+        { .addr = 0x2d, .name = "SPCR", },
+        { .addr = 0x2e, .name = "SPSR", },
+        { .addr = 0x2f, .name = "SPDR", },
+        {
+            .addr = 0x30,
+            .name = "PIND",
+            .vdev_create = port_create,
+            .reset_value = 0x00,
+            .rd_mask = 0xff,
+            .wr_mask = 0xff,
+        },
+        {
+            .addr = 0x31,
+            .name = "DDRD",
+            .ref_addr = 0x30,
+            .reset_value = 0x00,
+            .rd_mask = 0xff,
+            .wr_mask = 0xff,
+        },
+        {
+            .addr = 0x32,
+            .name = "PORTD",
+            .ref_addr = 0x30,
+            .reset_value = 0x00,
+            .rd_mask = 0xff,
+            .wr_mask = 0xff,
+        },
+        {
+            .addr = 0x33,
+            .name = "PINC",
+            .vdev_create = port_create,
+            .reset_value = 0x00,
+            .rd_mask = 0xff,
+            .wr_mask = 0xff,
+        },
+        {
+            .addr = 0x34,
+            .name = "DDRC",
+            .ref_addr = 0x33,
+            .reset_value = 0x00,
+            .rd_mask = 0xff,
+            .wr_mask = 0xff,
+        },
+        {
+            .addr = 0x35,
+            .name = "PORTC",
+            .ref_addr = 0x33,
+            .reset_value = 0x00,
+            .rd_mask = 0xff,
+            .wr_mask = 0xff,
+        },
+        {
+            .addr = 0x36,
+            .name = "PINB",
+            .vdev_create = port_create,
+            .reset_value = 0x00,
+            .rd_mask = 0xff,
+            .wr_mask = 0xff,
+        },
+        {
+            .addr = 0x37,
+            .name = "DDRB",
+            .ref_addr = 0x36,
+            .reset_value = 0x00,
+            .rd_mask = 0xff,
+            .wr_mask = 0xff,
+        },
+        {
+            .addr = 0x38,
+            .name = "PORTB",
+            .ref_addr = 0x36,
+            .reset_value = 0x00,
+            .rd_mask = 0xff,
+            .wr_mask = 0xff,
+        },
+        {
+            .addr = 0x39,
+            .name = "PINA",
+            .vdev_create = port_create,
+            .reset_value = 0x00,
+            .rd_mask = 0xff,
+            .wr_mask = 0xff,
+        },
+        {
+            .addr = 0x3a,
+            .name = "DDRA",
+            .ref_addr = 0x39,
+            .reset_value = 0x00,
+            .rd_mask = 0xff,
+            .wr_mask = 0xff,
+        },
+        {
+            .addr = 0x3b,
+            .name = "PORTA",
+            .ref_addr = 0x39,
+            .reset_value = 0x00,
+            .rd_mask = 0xff,
+            .wr_mask = 0xff,
+        },
+       {
+            .addr = 0x3c,
+            .name = "EECR", 
+            .vdev_create = ee_create,
+            .reset_value = 0,
+            .rd_mask = 0xff,
+            .wr_mask = 0xff,
+        },
+        {
+            .addr = 0x3d,
+            .name = "EEDR",
+            .ref_addr = 0x3c,
+            .reset_value = 0,
+            .rd_mask = 0xff,
+            .wr_mask = 0xff,
+        },
+        {
+            .addr = 0x3e,
+            .name = "EEARL",
+            .ref_addr = 0x3c,
+            .reset_value = 0,
+            .rd_mask = 0xff,
+            .wr_mask = 0xff,
+        },
+        {
+            .addr = 0x3f,
+            .name = "EEARH",
+            .ref_addr = 0x3c,
+            .reset_value = 0,
+            .rd_mask = 0xff,
+            .wr_mask = 0xff,
+        },
+        { .addr = 0x40, .name = "SFIOR", },
+        { .addr = 0x41, .name = "WDTCR", },
+        { .addr = 0x42, .name = "OCDR", },
+        { .addr = 0x43, .name = "OCR2", },
+        { .addr = 0x44, .name = "TCNT2", },
+        { .addr = 0x45, .name = "TCCR2", },
+        { .addr = 0x46, .name = "ICR1L", },
+        { .addr = 0x47, .name = "ICR1H", },
+        { .addr = 0x48, .name = "OCR1BL", },
+        { .addr = 0x49, .name = "OCR1BH", },
+        { .addr = 0x4a, .name = "OCR1AL", },
+        { .addr = 0x4b, .name = "OCR1AH", },
+        { .addr = 0x4c, .name = "TCNT1L", },
+        { .addr = 0x4d, .name = "TCNT1H", },
+        { .addr = 0x4e, .name = "TCCR1B", },
+        { .addr = 0x4f, .name = "TCCR1A", },
+        { .addr = 0x50, .name = "ASSR", },
+        { .addr = 0x51, .name = "OCR0", },
+        { .addr = 0x52, .name = "TCNT0", },
+        { .addr = 0x53, .name = "TCCR0", },
+        { .addr = 0x54, .name = "MCUCSR", },
+        { .addr = 0x55, .name = "MCUCR", },
+        { .addr = 0x56, .name = "TIFR", },
+        { .addr = 0x57, .name = "TIMSK", },
+        { .addr = 0x58, .name = "EIFR", },
+        { .addr = 0x59, .name = "EIMSK", },
+        { .addr = 0x5a, .name = "EICRB", },
+        {
+            .addr = 0x5b,
+            .name = "RAMPZ",
+            .vdev_create = rampz_create,
+            .reset_value = 0,
+            .rd_mask = 0xff,
+            .wr_mask = 0x01,
+        },
+        { .addr = 0x5c, .name = "XDIV", },
+        {
+            .addr = 0x5d,
+            .name = "SPL", 
+            .vdev_create = sp_create,
+            .reset_value = 0,
+            .rd_mask = 0xff,
+            .wr_mask = 0xff,
+        },
+        {
+            .addr = 0x5e,
+            .name = "SPH",
+            .ref_addr = 0x5d,
+            .reset_value = 0,
+            .rd_mask = 0xff,
+            .wr_mask = 0xff,
+        },
+        {
+            .addr = 0x5f,
+            .name = "SREG",
+            .vdev_create = sreg_create,
+            .reset_value = 0,
+            .rd_mask = 0xff,
+            .wr_mask = 0xff,
+        },
+        {
+            .addr = 0x61,
+            .name = "DDRF",
+            .ref_addr = 0x20,
+            .reset_value = 0x00,
+            .rd_mask = 0xff,
+            .wr_mask = 0xff,
+        },
+        {
+            .addr = 0x62,
+            .name = "PORTF",
+            .ref_addr = 0x20,
+            .reset_value = 0x00,
+            .rd_mask = 0xff,
+            .wr_mask = 0xff,
+        },
+        {
+            .addr = 0x63,
+            .name = "PING",
+            .vdev_create = port_create,
+            .reset_value = 0x00,
+            .rd_mask = 0x1f,
+            .wr_mask = 0x1f,
+        },
+        {
+            .addr = 0x64,
+            .name = "DDRG",
+            .ref_addr = 0x63,
+            .reset_value = 0x00,
+            .rd_mask = 0x1f,
+            .wr_mask = 0x1f,
+        },
+        {
+            .addr = 0x65,
+            .name = "PORTG",
+            .ref_addr = 0x63,
+            .reset_value = 0x00,
+            .rd_mask = 0x1f,
+            .wr_mask = 0x1f,
+        },
+        {
+            .addr = 0x68,
+            .name = "SPMCSR",
+            .vdev_create = spm_create,
+            .reset_value = 0x00,
+            .rd_mask = 0xff,
+            .wr_mask = 0xff,
+        },
+        { .addr = 0x6a, .name = "EICRA", },
+        { .addr = 0x6c, .name = "XMCRB", },
+        { .addr = 0x6d, .name = "XMCRA", },
+        { .addr = 0x6f, .name = "OSCCAL", },
+        { .addr = 0x70, .name = "TWBR", },
+        { .addr = 0x71, .name = "TWSR", },
+        { .addr = 0x72, .name = "TWAR", },
+        { .addr = 0x73, .name = "TWDR", },
+        { .addr = 0x74, .name = "TWCR", },
+        { .addr = 0x78, .name = "OCR1CL", },
+        { .addr = 0x79, .name = "OCR1CH", },
+        { .addr = 0x7a, .name = "TCCR1C", },
+        { .addr = 0x7c, .name = "ETIFR", },
+        { .addr = 0x7d, .name = "ETIMSK", },
+        { .addr = 0x80, .name = "ICR3L", },
+        { .addr = 0x81, .name = "ICR3H", },
+        { .addr = 0x82, .name = "OCR3CL", },
+        { .addr = 0x83, .name = "OCR3CH", },
+        { .addr = 0x84, .name = "OCR3BL", },
+        { .addr = 0x85, .name = "OCR3BH", },
+        { .addr = 0x86, .name = "OCR3AL", },
+        { .addr = 0x87, .name = "OCR3AH", },
+        { .addr = 0x88, .name = "TCNT3L", },
+        { .addr = 0x89, .name = "TCNT3H", },
+        { .addr = 0x8a, .name = "TCCR3B", },
+        { .addr = 0x8b, .name = "TCCR3A", },
+        { .addr = 0x8c, .name = "TCCR3C", },
+        { .addr = 0x90, .name = "UBRR0H", },
+        { .addr = 0x95, .name = "UCSR0C", },
+        { .addr = 0x98, .name = "UBRR1H", },
+        { .addr = 0x99, .name = "UBRR1L", },
+        { .addr = 0x9a, .name = "UCSR1B", },
+        { .addr = 0x9b, .name = "UCSR1A", },
+        { .addr = 0x9c, .name = "UDR1", },
+        { .addr = 0x9d, .name = "UCSR1C", },
+        {
+            .addr = 0xfe,
+            .name = "FIFO",
+            .vdev_create = oseid_create,
+            .reset_value = 0x00,
+            .rd_mask = 0xff,
+            .wr_mask = 0xff,
+        },
+        {
+            .addr = 0xff,
+            .name = "FIFOCTRL",
+            .ref_addr = 0xfe,
+            .reset_value = 0,
+            .rd_mask = 0xff,
+            .wr_mask = 0xff,
+        },
+        IO_REG_DEFN_TERMINATOR
+    }
+};
+
+/* *INDENT-ON* */
+#endif /* IN_DEVSUPP_C */
diff --git a/src/defn/mega128.h b/src/defn/mega128.h
index 736bc16..16dddba 100644
--- a/src/defn/mega128.h
+++ b/src/defn/mega128.h
@@ -281,7 +281,14 @@ static DevSuppDefn defn_atmega128 = {
             .rd_mask = 0x1f,
             .wr_mask = 0x1f,
         },
-        { .addr = 0x68, .name = "SPMCSR", },
+        {
+            .addr = 0x68,
+            .name = "SPMCSR",
+            .vdev_create = spm_create,
+            .reset_value = 0x00,
+            .rd_mask = 0xff,
+            .wr_mask = 0xff,
+        },
         { .addr = 0x6a, .name = "EICRA", },
         { .addr = 0x6c, .name = "XMCRB", },
         { .addr = 0x6d, .name = "XMCRA", },
diff --git a/src/devsupp.c b/src/devsupp.c
index 7552b9c..0fd6d66 100644
--- a/src/devsupp.c
+++ b/src/devsupp.c
@@ -66,7 +66,7 @@
 #include "avrcore.h"
 
 #include "devsupp.h"
-
+#include "OsEID.h"
 #ifndef DOXYGEN                 /* don't expose to doxygen */
 
 /*
@@ -215,6 +215,7 @@ dev_supp_get_sram_sz (DevSuppDefn *dev)
 #include "defn/mega16.h"
 #include "defn/mega103.h"
 #include "defn/mega128.h"
+#include "defn/OsEID128.h"
 
 #include "defn/43usb320.h"
 #include "defn/43usb325.h"
@@ -237,6 +238,7 @@ static DevSuppDefn *devices_supported[] = {
     &defn_atmega16,
     &defn_atmega103,
     &defn_atmega128,
+    &defn_OsEID128,
     &defn_at43usb351,
     &defn_at43usb353,
     &defn_at43usb355,
diff --git a/src/spm_helper.c b/src/spm_helper.c
new file mode 100644
index 0000000..81f7e92
--- /dev/null
+++ b/src/spm_helper.c
@@ -0,0 +1,264 @@
+/*
+ * $Id: src/spm_helper.c,v 1.15 2017/06/27 07:09:56 troth Exp $
+ *
+ ****************************************************************************
+ * implementation of SPM insturction (flash write operation)
+ * Copyright (C) 2017 Peter Popovec, popovec.peter@gmail.com
+ *
+ *  This program is free software: you can redistribute it and/or modify
+ *   it under the terms of the GNU General Public License as published by
+ *   the Free Software Foundation, either version 3 of the License, or
+ *   (at your option) any later version.
+ *
+ *   This program is distributed in the hope that it will be useful,
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *   GNU General Public License for more details.
+ *
+ *    You should have received a copy of the GNU General Public License
+ *    along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ ****************************************************************************
+ */
+
+#include <config.h>
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+
+#include "avrerror.h"
+#include "avrmalloc.h"
+#include "avrclass.h"
+#include "utils.h"
+#include "callback.h"
+#include "op_names.h"
+
+#include "storage.h"
+#include "flash.h"
+
+#include "vdevs.h"
+#include "memory.h"
+#include "stack.h"
+#include "register.h"
+#include "sram.h"
+#include "eeprom.h"
+#include "timers.h"
+#include "ports.h"
+
+#include "avrcore.h"
+
+#include "display.h"
+#include "spm_helper.h"
+
+///////////////////////////////////////////
+
+static SPMdata *spm_new (int addr, char *name);
+static void spm_construct (SPMdata * ee, int addr, char *name);
+static void spm_destroy (void *sp);
+static uint8_t spm_read (VDevice * dev, int addr);
+static void spm_write (VDevice * dev, int addr, uint8_t val);
+static void spm_reset (VDevice * dev);
+static void spm_add_addr (VDevice * vdev, int addr, char *name, int rel_addr,
+			  void *data);
+
+VDevice *
+spm_create (int addr, char *name, int rel_addr, void *data)
+{
+  return (VDevice *) spm_new (addr, name);
+}
+
+static SPMdata *
+spm_new (int addr, char *name)
+{
+  SPMdata *spm;
+
+  spm = avr_new (SPMdata, 1);
+  spm_construct (spm, addr, name);
+  class_overload_destroy ((AvrClass *) spm, spm_destroy);
+
+  return spm;
+}
+
+static void
+spm_construct (SPMdata * spm, int addr, char *name)
+{
+  if (spm == NULL)
+    avr_error ("passed null ptr");
+
+  vdev_construct ((VDevice *) spm, spm_read, spm_write, spm_reset,
+		  spm_add_addr);
+
+  spm_add_addr ((VDevice *) spm, addr, name, 0, NULL);
+
+  spm_reset ((VDevice *) spm);
+}
+
+static void
+spm_destroy (void *spm)
+{
+  if (spm == NULL)
+    return;
+
+  vdev_destroy (spm);
+}
+
+static uint8_t
+spm_read (VDevice * dev, int addr)
+{
+  SPMdata *spm = (SPMdata *) dev;
+  AvrCore *core = (AvrCore *) vdev_get_core ((VDevice *) dev);
+  if (addr == (spm->addr) + 0)
+    return core->spmhelper->SPMCSR;
+  avr_error ("Bad address: 0x%04x", addr);
+
+  return 0;
+}
+
+static void
+spm_write (VDevice * dev, int addr, uint8_t val)
+{
+  SPMdata *spm = (SPMdata *) dev;
+  AvrCore *core = (AvrCore *) vdev_get_core ((VDevice *) dev);
+
+  if (val & 0x80)
+    avr_error ("SPMCSR does not support SPMIE bit 0x%02x", val);
+  if (val & 0x20)
+    avr_error ("SPMCSR not used bit 0x%02x", val);
+  if (val & 0x08)
+    avr_error ("SPMCSR not support BLBSET bit 0x%02x", val);
+
+  switch (val)
+    {
+    case 0x01:
+    case 0x11:
+    case 0x09:
+    case 0x05:
+    case 0x03:
+      break;
+    default:
+      avr_error ("SPMCSR operation without any effect\n");
+    }
+
+  if (addr == (spm->addr))
+    core->spmhelper->SPMCSR = val;
+  else
+    avr_error ("Bad address: 0x%04x", addr);
+}
+
+static void
+spm_reset (VDevice * dev)
+{
+//  AvrCore *core = (AvrCore *) vdev_get_core ((VDevice *) dev);
+
+//  core->spmhelper->SPMCSR = 0;
+}
+
+static void
+spm_add_addr (VDevice * vdev, int addr, char *name, int rel_addr, void *data)
+{
+  SPMdata *spm = (SPMdata *) vdev;
+
+  if (strncmp ("SPMCSR", name, 6) == 0)
+    spm->addr = addr;
+  else
+    avr_error ("Bad address: 0x%04x %s", addr, name);
+}
+
+
+void
+spm_run (SPMhelper * spmhelper, int reg0, int reg1, int Z)
+{
+/*
+  avr_message ("running SPM r0=0x%02x r1=0x%02x Z=%d SPMCSR=0x%02x\n", reg0,
+	       reg1, Z, spmhelper->SPMCSR);
+*/
+  if (spmhelper->SPMCSR == 0x11)
+    {
+      //reenable RWW
+      avr_message ("SPM reenable RWW\n");
+      memset (spmhelper->page_buffer, 0xff, 256);
+      spmhelper->SPMCSR = 0;
+      return;
+    }
+  if (spmhelper->SPMCSR == 0x01)
+    {
+      // write page buffer
+      Z &= 0xfe;
+//      avr_message ("SPM write page buffer %d [%02x %02x]\n", Z, reg0, reg1);
+      spmhelper->page_buffer[Z] = reg0;
+      spmhelper->page_buffer[Z + 1] = reg1;
+      spmhelper->SPMCSR = 0;
+      return;
+    }
+  if (spmhelper->SPMCSR == 0x03)
+    {
+      // page erase
+      int i;
+      Z >>= 1;
+      Z &= 0xff80;
+      avr_message ("SPM page erase page %d\n", Z);
+
+      for (i = 0; i < 128; i++)
+	flash_write (spmhelper->flash, Z + i, 0xffff);
+
+      spmhelper->SPMCSR = 0;
+      return;
+    }
+  if (spmhelper->SPMCSR == 0x05)
+    {
+      // page write
+      int i, f;
+      uint8_t hi, lo;
+      Z >>= 1;
+      Z &= 0xff80;
+
+      avr_message ("SPM page write %d\n", Z);
+      for (i = 0; i < 128; i++)
+	{
+	  f = flash_read (spmhelper->flash, Z + i);
+	  lo = f & 0xff;
+	  hi = f >> 8;
+	  lo &= spmhelper->page_buffer[i * 2];
+	  hi &= spmhelper->page_buffer[i * 2 + 1];
+	  
+	  flash_write (spmhelper->flash, Z + i, hi << 8 | lo);
+	}
+      spmhelper->SPMCSR = 0;
+      return;
+    }
+  avr_error ("SPM unknown operation %02x\n", spmhelper->SPMCSR);
+}
+
+static void spmhelper_construct (SPMhelper * spmhelper, Flash * flash);
+static void spmhelper_destroy (void *spm);
+
+SPMhelper *
+spmhelper_new (Flash * flash)
+{
+  SPMhelper *spmhelper;
+
+  spmhelper = avr_new (SPMhelper, 1);
+  spmhelper_construct (spmhelper, flash);
+  class_overload_destroy ((AvrClass *) spmhelper, spmhelper_destroy);
+
+  return spmhelper;
+}
+
+
+static void
+spmhelper_construct (SPMhelper * spmhelper, Flash * flash)
+{
+  if (spmhelper == NULL)
+    avr_error ("passed null ptr");
+  spmhelper->flash = flash;
+
+}
+
+static void
+spmhelper_destroy (void *spm)
+{
+  if (spm == NULL)
+    return;
+
+  vdev_destroy (spm);
+}
diff --git a/src/spm_helper.h b/src/spm_helper.h
new file mode 100644
index 0000000..23d6f06
--- /dev/null
+++ b/src/spm_helper.h
@@ -0,0 +1,29 @@
+#ifndef _SPM_HELPER
+#define _SPM_HELPER
+typedef struct _SPMhelper SPMhelper;
+
+struct _SPMhelper
+{
+    AvrClass parent;
+    uint8_t page_buffer[256];
+    uint8_t SPMCSR;
+    Flash *flash;
+        
+    VDevice *SPM;                /* Virtual Device for SPM subsystem */
+};
+
+typedef struct _SPMdata SPMdata;
+
+struct _SPMdata
+{  
+  VDevice parent;
+   
+  uint16_t addr;
+}; 
+
+
+
+extern VDevice *spm_create (int addr, char *name, int rel_addr, void *data);
+extern void spm_run (SPMhelper *spmhelper, int reg0, int reg1, int Z);
+extern SPMhelper * spmhelper_new(Flash * flash);
+#endif
