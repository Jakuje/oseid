# on debian systems install:
# apt-get install avrdude srecord avr-libc gcc-avr
CC=avr-gcc
OBJCOPY=avr-objcopy
CPU=atmega128
#WARNING! there is a limitation in usbtiny, write over 64k _fail_ on atmega128
#PRG=usbtiny -B 10
#PRG=dapa_i2c
PRG=avrispmkII

CFLAGS=  -Wall -Os -mmcu=$(CPU) 
# Warning, enabling relax can break lib/avr/mp_mul_32.S code (with enabled --relax always enable --no-call-ret-replacement)
CFLAGS+= -mrelax  -Wl,--relax -Wl,--no-call-ret-replacement
CFLAGS+= -Wl,--section-start=.flash_end=0x1ff00
CFLAGS+= -fshort-enums -fjump-tables --param  case-values-threshold=10
CFLAGS+= -DOsEID
#CFLAGS += -DNIST_ONLY
#CFLAGS+= -DCARD_TESTS

BUILD= build/atmega128/
TARGET= targets/atmega128/
TARGET_LIB = lib/avr/
TARGET_SPEC= $(BUILD)card_io.o $(BUILD)mem_device.o $(BUILD)rnd.o $(BUILD)avr.o

# do not restore I flag in SREG, forse interrupt enable
CFLAGS += -DISR_ENABLE_FORCE

all:	$(BUILD)card.hex

builddir:
	@rm -rf $(BUILD)
	@mkdir -p $(BUILD)


#device dependent files

HAVE =          -DRSA_BYTES=128
HAVE +=		-DE_BITS=4

#for devices with memory below 32kiB enable RAM_LE32 to speed up multiplications
HAVE +=         -DRAM_LE32

# disable both for environment where interrupt flag must be restored after stack pointer change
# normal tick calculation in an environment where interrupt is always disabled
#HAVE +=         -DISR_DISABLED
# In an environment where interrupt is always enabled
HAVE +=		-DISR_ENABLE_FORCE


HAVE +=		-DHAVE_RSA_MUL_192
HAVE +=         -DHAVE_RSA_MUL_192_NO_ABI
TARGET_SPEC +=	$(BUILD)mp_mul_192.o

HAVE +=		-DHAVE_RSA_MUL_256 
HAVE +=         -DHAVE_RSA_MUL_256_NO_ABI
TARGET_SPEC +=	$(BUILD)mp_mul_256.o

HAVE +=		-DHAVE_RSA_SHIFTL
HAVE +=		-DHAVE_RSA_SHIFTR_LONG

# not needed if monpro is in asm
#HAVE +=		-DHAVE_RSA_ADD_LONG

HAVE +=		-DHAVE_RSA_MUL_512_MOD
HAVE +=		-DHAVE_RSA_MUL_768_MOD

HAVE +=		-DHAVE_RSA_SUB_LONG
HAVE +=	        -DHAVE_RSA_SUB

HAVE +=		-DHAVE_RSA_MUL_192
HAVE +=		-DHAVE_RSA_MUL_256
HAVE +=		-DHAVE_RSA_MUL_384
HAVE +=		-DHAVE_RSA_MUL_512
HAVE +=		-DHAVE_RSA_MUL_768
HAVE +=		-DHAVE_RSA_MUL_1024
HAVE +=		-DHAVE_RSA_MUL_128_MOD
HAVE +=		-DHAVE_RSA_MUL_192_MOD
TARGET_SPEC +=	$(BUILD)mp.o
TARGET_SPEC +=  $(BUILD)mp_mul_24.o
TARGET_SPEC +=  $(BUILD)mp_mul_32.o

HAVE +=		-DHAVE_RSA_MUL_128
HAVE +=         -DHAVE_RSA_MUL_128_NO_ABI
TARGET_SPEC +=	$(BUILD)mp_mul_128.o

HAVE +=		-DHAVE_RSA_SQUARE_192
HAVE +=		-DHAVE_RSA_SQUARE_256
HAVE +=		-DHAVE_RSA_SQUARE_384
HAVE +=		-DHAVE_RSA_SQUARE_512
HAVE +=		-DHAVE_RSA_SQUARE_768
HAVE +=		-DHAVE_RSA_SQUARE_1024
TARGET_SPEC +=  $(BUILD)mp_square.o

HAVE +=		-DHAVE_MON_PRO0 -DUSE_N0=0
HAVE +=		-DUSE_N0=0
HAVE +=		-DHAVE_RSA_MOD
HAVE +=		-DHAVE_RSA_MOD_R
HAVE +=		-DHAVE_RSA_INV_MOD
TARGET_SPEC +=	$(BUILD)rsa_S.o


HAVE +=		-DHAVE_GET_CONSTANTS
TARGET_SPEC +=	$(BUILD)xconstants.o


HAVE +=         -DHAVE_MP_ADD 
HAVE +=         -DHAVE_MP_SUB 
HAVE +=         -DHAVE_MP_CMP 
HAVE += 	-DHAVE_MP_SHIFTR_C -DHAVE_MP_SHIFTR -DHAVE_MP_SHIFTR_2N

# not needed HAVE_RSA_MOD is set
#HAVE +=         -DHAVE_MP_SUB_2N

HAVE +=		-DHAVE_MP_SHIFTL

# this is slow, but modular addition and subtraction is side channel safe (perhaps)
HAVE +=		-DHAVE_MP_ADDSUB_MOD

$(BUILD)avr.o:	$(TARGET)avr.c
		$(CC) $(CFLAGS) -c -o $(BUILD)avr.o $(TARGET)avr.c

$(BUILD)card_io.o:	$(TARGET)card_io.S card_os/card_io.h
		$(CC) $(CFLAGS) $(HAVE) -c -o $(BUILD)card_io.o $(TARGET)card_io.S -I$(TARGET)

$(BUILD)mem_device.o:	 $(TARGET)mem_device.S
		$(CC) $(CFLAGS) $(HAVE) -c -o $(BUILD)mem_device.o  $(TARGET)mem_device.S -I card_os

$(BUILD)rnd.o:	 $(TARGET)rnd.c  card_os/rnd.h
		$(CC) $(CFLAGS) $(HAVE) -c -o $(BUILD)rnd.o  $(TARGET)rnd.c -I card_os

$(BUILD)rsa_S.o:	$(TARGET_LIB)rsa.S
		$(CC) $(CFLAGS) $(HAVE) -c -o $(BUILD)rsa_S.o $(TARGET_LIB)rsa.S

$(BUILD)mp_mul_128.o:	$(TARGET_LIB)mp_mul_128.S
		$(CC) $(CFLAGS) $(HAVE) -c -o $(BUILD)mp_mul_128.o $(TARGET_LIB)mp_mul_128.S -Icard_os

$(BUILD)mp_mul_192.o:	$(TARGET_LIB)mp_mul_192.S
		$(CC) $(CFLAGS) $(HAVE) -c -o $(BUILD)mp_mul_192.o $(TARGET_LIB)mp_mul_192.S -Icard_os

$(BUILD)mp_mul_256.o:	$(TARGET_LIB)mp_mul_256.S
		$(CC) $(CFLAGS) $(HAVE) -c -o $(BUILD)mp_mul_256.o $(TARGET_LIB)mp_mul_256.S -Icard_os

$(BUILD)mp_mul_24.o:	$(TARGET_LIB)mp_mul_24.S
		$(CC) $(CFLAGS) $(HAVE) -c -o $(BUILD)mp_mul_24.o $(TARGET_LIB)mp_mul_24.S -Icard_os

$(BUILD)mp_mul_32.o:	$(TARGET_LIB)mp_mul_32.S
		$(CC) $(CFLAGS) $(HAVE) -c -o $(BUILD)mp_mul_32.o $(TARGET_LIB)mp_mul_32.S -Icard_os

$(BUILD)mp_square.o:	$(TARGET_LIB)mp_square.S
		$(CC) $(CFLAGS) $(HAVE) -c -o $(BUILD)mp_square.o $(TARGET_LIB)mp_square.S -Icard_os

$(BUILD)mp.o:	$(TARGET_LIB)mp.S
		$(CC) $(CFLAGS) $(HAVE) -c -o $(BUILD)mp.o $(TARGET_LIB)mp.S -Icard_os

$(BUILD)xconstants.o:	$(TARGET)constants.c
		$(CC) $(CFLAGS) $(HAVE) -c -o $(BUILD)xconstants.o $(TARGET)constants.c -Icard_os


#-------------------------------------------------------------------
# card_os files
#-------------------------------------------------------------------

include card_os/Makefile


	
$(BUILD)card.elf:	builddir $(COMMON_TARGETS) $(TARGET_SPEC)
			$(CC) $(CFLAGS) $(COMMON_TARGETS) $(TARGET_SPEC) -o $(BUILD)card.elf
			avr-size --format=SysV $(BUILD)card.elf
			avr-size $(BUILD)card.elf

$(BUILD)card_orig.hex:	$(BUILD)card.elf
		$(OBJCOPY) -O ihex -R .eeprom -R .fuse -R .lock $(BUILD)card.elf $(BUILD)card_orig.hex

#insert serial number based on date
$(BUILD)card.hex:	$(BUILD)card_orig.hex
		srec_cat $(BUILD)card_orig.hex -Intel `srec_cat $(BUILD)card_orig.hex -Intel -o - -binary|grep --byte-offset --only-matching --text \`echo -n -e "OsEID\004\002\020"\`|awk -F: '{a=$$1;print "-exclude "a+8" "a+18" -generate "a+8" "a+18}'`  -repeat-string `date +%s` -o $(BUILD)card.hex -Intel

$(BUILD)card.eeprom.hex:	$(BUILD)card.elf
		$(OBJCOPY) -O ihex -j .eeprom --set-section-flags=.eeprom="alloc,load" \
		--change-section-lma .eeprom=0 --no-change-warnings $(BUILD)card.elf $(BUILD)card.eeprom.hex

$(BUILD)card.fuses.hex:		$(BUILD)card.elf
		$(OBJCOPY) -O ihex -j .fuse --set-section-flags=.fuses="alloc,load" --change-section-lma .fuse=0 \
                    --no-change-warnings  $(BUILD)card.elf $(BUILD)card.fuses.hex

$(BUILD)card.lock.hex:		$(BUILD)card.elf
		$(OBJCOPY) -O ihex -j .lock --set-section-flags=.lock="alloc,load" --change-section-lma .lock=0 \
                    --no-change-warnings  $(BUILD)card.elf $(BUILD)card.lock.hex

$(BUILD)card.lfuse.hex:	$(BUILD)card.fuses.hex
		srec_cat $(BUILD)card.fuses.hex -Intel -crop 0x00 0x01 -offset  0 -O $(BUILD)card.lfuse.hex -Intel -address-length=2

$(BUILD)card.hfuse.hex:	$(BUILD)card.fuses.hex
		srec_cat $(BUILD)card.fuses.hex -Intel -crop 0x01 0x02 -offset -1 -O $(BUILD)card.hfuse.hex -Intel -address-length=2

$(BUILD)card.efuse.hex:	$(BUILD)card.fuses.hex
		srec_cat $(BUILD)card.fuses.hex -Intel -crop 0x02 0x03 -offset -2 -O $(BUILD)card.efuse.hex -Intel -address-length=2

.PHONY:	program
program:	$(BUILD)card.hex
		avrdude -p m128 -c $(PRG) -v -U flash:w:$(BUILD)card.hex

# original fuses atmega128a:
# signature = 0x1e9702
# fuses: (E:FD, H:99, L:E1)
# fuses are defined in targest/atmega128/avr.c

.PHONY:	fuses
fuses:	e_fuse l_fuse h_fuse

.PHONY:	l_fuse h_fuse e_fuse
l_fuse:	$(BUILD)card.lfuse.hex
	avrdude -p m128 -c $(PRG) -v -U lfuse:w:$(BUILD)card.lfuse.hex

h_fuse:	$(BUILD)card.hfuse.hex
	avrdude -p m128 -c $(PRG) -v -U hfuse:w:$(BUILD)card.hfuse.hex

e_fuse:	$(BUILD)card.efuse.hex
	avrdude -p m128 -c $(PRG) -v -U efuse:w:$(BUILD)card.efuse.hex

lock:	$(BUILD)card.lock.hex
	avrdude -p m128 -c $(PRG) -v -U lock:w:$(BUILD)card.lock.hex

programRead:
	avrdude -p m128 -c $(PRG) -v -U flash:r:rom_asm_verify.bin:r

#	avrdude -p m128 -c $(PRG) -v -U flash:r:rom_asm_verify.hex:i

eepromRead:
	avrdude -p m128 -c $(PRG) -v -U eeprom:r:eeprom_verify.bin:r

.PHONY:	clean
clean:
	rm -f *~
	rm -f card_os/*~
	rm -f $(TARGET)/*~
	rm -f $(BUILD)/*
